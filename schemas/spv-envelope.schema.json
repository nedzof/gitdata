{
   "$schema":"http://json-schema.org/draft-07/schema#",
   "$id":"schemas/spv-envelope.schema.json",
   "title":"SPV Envelope",
   "description":"A self-contained proof that a transaction is included in a specific block, plus enough info to determine confirmations.",
   "type":"object",
   "required":[
      "rawTx",
      "proof",
      "block"
   ],
   "properties":{
      "rawTx":{
         "description":"Full transaction hex (even-length, lowercase recommended).",
         "type":"string",
         "pattern":"^[0-9a-fA-F]{2,}$"
      },
      "txid":{
         "description":"Double-SHA256 digest of rawTx, 32-byte hex.",
         "type":"string",
         "pattern":"^[0-9a-fA-F]{64}$"
      },
      "proof":{
         "description":"Merkle inclusion proof for this transaction.",
         "type":"object",
         "required":[
            "txid",
            "merkleRoot",
            "path"
         ],
         "properties":{
            "txid":{
               "description":"The txid proved by this path (must match/enforce rawTx).",
               "type":"string",
               "pattern":"^[0-9a-fA-F]{64}$"
            },
            "merkleRoot":{
               "description":"Merkle root claimed for the containing block.",
               "type":"string",
               "pattern":"^[0-9a-fA-F]{64}$"
            },
            "path":{
               "description":"Ordered siblings from txid up to the merkleRoot. Each step names the sibling hash and its position.",
               "type":"array",
               "minItems":1,
               "items":{
                  "type":"object",
                  "required":[
                     "hash",
                     "position"
                  ],
                  "properties":{
                     "hash":{
                        "type":"string",
                        "pattern":"^[0-9a-fA-F]{64}$"
                     },
                     "position":{
                        "type":"string",
                        "enum":[
                           "left",
                           "right"
                        ]
                     }
                  },
                  "additionalProperties":false
               }
            }
         },
         "additionalProperties":false
      },
      "block":{
         "description":"Reference to the block that contains the transaction.",
         "type":"object",
         "oneOf":[
            {
               "required":[
                  "blockHeader"
               ],
               "properties":{
                  "blockHeader":{
                     "description":"Raw 80-byte block header (hex).",
                     "type":"string",
                     "pattern":"^[0-9a-fA-F]{160}$"
                  }
               },
               "additionalProperties":false
            },
            {
               "required":[
                  "blockHash",
                  "blockHeight"
               ],
               "properties":{
                  "blockHash":{
                     "type":"string",
                     "pattern":"^[0-9a-fA-F]{64}$"
                  },
                  "blockHeight":{
                     "type":"integer",
                     "minimum":0
                  }
               },
               "additionalProperties":false
            }
         ]
      },
      "headerChain":{
         "description":"Optional chain segment for fully offline verification (ordered, oldest->newest). Each item is a raw 80-byte header hex.",
         "type":"array",
         "minItems":1,
         "items":{
            "type":"string",
            "pattern":"^[0-9a-fA-F]{160}$"
         }
      },
      "confirmations":{
         "description":"Observed confirmation count at assembly time (informational; must be recomputed by verifiers).",
         "type":"integer",
         "minimum":0
      },
      "ts":{
         "description":"Unix epoch seconds when this envelope was assembled.",
         "type":"integer",
         "minimum":0
      }
   },
   "allOf":[
      {
         "if":{
            "required":[
               "txid"
            ]
         },
         "then":{
            "properties":{
               "txid":{
                  
               },
               "proof":{
                  "properties":{
                     "txid":{
                        "const":{
                           "$data":"1/txid"
                        }
                     }
                  }
               }
            }
         }
      }
   ],
   "additionalProperties":false
}
