import { TrxToken } from '../../../sdk/WalletStorage.interfaces';
import { TableCertificateField } from '../tables/TableCertificateField';
import { EntityBase, EntityStorage, SyncMap } from './EntityBase';
export declare class EntityCertificateField extends EntityBase<TableCertificateField> {
    constructor(api?: TableCertificateField);
    updateApi(): void;
    get userId(): number;
    set userId(v: number);
    get certificateId(): number;
    set certificateId(v: number);
    get created_at(): Date;
    set created_at(v: Date);
    get updated_at(): Date;
    set updated_at(v: Date);
    get fieldName(): string;
    set fieldName(v: string);
    get fieldValue(): string;
    set fieldValue(v: string);
    get masterKey(): string;
    set masterKey(v: string);
    get id(): number;
    get entityName(): string;
    get entityTable(): string;
    equals(ei: TableCertificateField, syncMap?: SyncMap | undefined): boolean;
    static mergeFind(storage: EntityStorage, userId: number, ei: TableCertificateField, syncMap: SyncMap, trx?: TrxToken): Promise<{
        found: boolean;
        eo: EntityCertificateField;
        eiId: number;
    }>;
    mergeNew(storage: EntityStorage, userId: number, syncMap: SyncMap, trx?: TrxToken): Promise<void>;
    mergeExisting(storage: EntityStorage, since: Date | undefined, ei: TableCertificateField, syncMap: SyncMap, trx?: TrxToken): Promise<boolean>;
}
//# sourceMappingURL=EntityCertificateField.d.ts.map