import { TrxToken } from '../../../sdk/WalletStorage.interfaces';
import { EntityBase, EntityStorage, SyncMap } from './EntityBase';
import { TableTxLabelMap } from '../tables/TableTxLabelMap';
export declare class EntityTxLabelMap extends EntityBase<TableTxLabelMap> {
    constructor(api?: TableTxLabelMap);
    updateApi(): void;
    get txLabelId(): number;
    set txLabelId(v: number);
    get transactionId(): number;
    set transactionId(v: number);
    get created_at(): Date;
    set created_at(v: Date);
    get updated_at(): Date;
    set updated_at(v: Date);
    get isDeleted(): boolean;
    set isDeleted(v: boolean);
    get id(): number;
    get entityName(): string;
    get entityTable(): string;
    equals(ei: TableTxLabelMap, syncMap?: SyncMap | undefined): boolean;
    static mergeFind(storage: EntityStorage, userId: number, ei: TableTxLabelMap, syncMap: SyncMap, trx?: TrxToken): Promise<{
        found: boolean;
        eo: EntityTxLabelMap;
        eiId: number;
    }>;
    mergeNew(storage: EntityStorage, userId: number, syncMap: SyncMap, trx?: TrxToken): Promise<void>;
    mergeExisting(storage: EntityStorage, since: Date | undefined, ei: TableTxLabelMap, syncMap: SyncMap, trx?: TrxToken): Promise<boolean>;
}
//# sourceMappingURL=EntityTxLabelMap.d.ts.map