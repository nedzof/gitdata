import { TrxToken } from '../../../sdk/WalletStorage.interfaces';
import { TableOutputTagMap } from '../tables/TableOutputTagMap';
import { EntityBase, EntityStorage, SyncMap } from './EntityBase';
export declare class EntityOutputTagMap extends EntityBase<TableOutputTagMap> {
    constructor(api?: TableOutputTagMap);
    updateApi(): void;
    get outputTagId(): number;
    set outputTagId(v: number);
    get outputId(): number;
    set outputId(v: number);
    get created_at(): Date;
    set created_at(v: Date);
    get updated_at(): Date;
    set updated_at(v: Date);
    get isDeleted(): boolean;
    set isDeleted(v: boolean);
    get id(): number;
    get entityName(): string;
    get entityTable(): string;
    equals(ei: TableOutputTagMap, syncMap?: SyncMap | undefined): boolean;
    static mergeFind(storage: EntityStorage, userId: number, ei: TableOutputTagMap, syncMap: SyncMap, trx?: TrxToken): Promise<{
        found: boolean;
        eo: EntityOutputTagMap;
        eiId: number;
    }>;
    mergeNew(storage: EntityStorage, userId: number, syncMap: SyncMap, trx?: TrxToken): Promise<void>;
    mergeExisting(storage: EntityStorage, since: Date | undefined, ei: TableOutputTagMap, syncMap: SyncMap, trx?: TrxToken): Promise<boolean>;
}
//# sourceMappingURL=EntityOutputTagMap.d.ts.map