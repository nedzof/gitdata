import { BlockHeader } from './BlockHeaderApi';
import { ChaintracksStorageApi } from './ChaintracksStorageApi';
export interface LiveIngestorApi {
    /**
     * Close and release all resources.
     */
    shutdown(): Promise<void>;
    getHeaderByHash(hash: string): Promise<BlockHeader | undefined>;
    /**
     * Called before first Synchronize with reference to storage.
     * Components requiring asynchronous setup can override base class implementation.
     * @param storage
     */
    setStorage(storage: ChaintracksStorageApi, log: (...args: any[]) => void): Promise<void>;
    storage(): ChaintracksStorageApi;
    startListening(liveHeaders: BlockHeader[]): Promise<void>;
    stopListening(): void;
}
//# sourceMappingURL=LiveIngestorApi.d.ts.map