import { CreateActionOptions, CreateActionResult, SignActionOptions, SignActionResult } from '@bsv/sdk';
import { sdk, Services, StorageKnex } from '../../src';
import { TestWalletNoSetup, TuEnv } from './TestUtilsWalletStorage';
export interface LocalWalletTestOptions {
    setActiveClient: boolean;
    useMySQLConnectionForClient: boolean;
    useTestIdentityKey: boolean;
    useIdentityKey2: boolean;
}
export interface LocalTestWalletSetup extends TestWalletNoSetup {
    setActiveClient: boolean;
    useMySQLConnectionForClient: boolean;
    useTestIdentityKey: boolean;
    useIdentityKey2: boolean;
}
export declare function createSetup(chain: sdk.Chain, options: LocalWalletTestOptions): Promise<LocalTestWalletSetup>;
export declare function burnOneSatTestOutput(setup: LocalTestWalletSetup, options?: CreateActionOptions, howMany?: number): Promise<void>;
export declare function createOneSatTestOutput(setup: LocalTestWalletSetup, options?: CreateActionOptions, howMany?: number): Promise<CreateActionResult>;
export declare function recoverOneSatTestOutputs(setup: LocalTestWalletSetup, testOptionsMode?: 1): Promise<void>;
export declare function trackReqByTxid(setup: LocalTestWalletSetup, txid: string): Promise<void>;
/**
 * This method will normally throw an error on the initial createAction call due to the output being doublespent
 * @param setup
 * @param options
 * @returns
 */
export declare function doubleSpendOldChange(setup: LocalTestWalletSetup, options: SignActionOptions): Promise<SignActionResult>;
export declare function createMainReviewSetup(): Promise<{
    env: TuEnv;
    storage: StorageKnex;
    services: Services;
}>;
//# sourceMappingURL=localWalletMethods.d.ts.map