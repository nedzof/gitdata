"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-nocheck
const TestUtilsWalletStorage_1 = require("../utils/TestUtilsWalletStorage");
const index_all_1 = require("../../src/index.all");
const StorageMySQLDojoReader_1 = require("../../src/storage/sync/StorageMySQLDojoReader");
const dotenv = __importStar(require("dotenv"));
dotenv.config();
describe('StorageMySQLDojoReader tests', () => {
    jest.setTimeout(99999999);
    const chain = 'test';
    const env = TestUtilsWalletStorage_1._tu.getEnv(chain);
    let reader;
    let writer;
    beforeAll(async () => {
        const connection = JSON.parse((chain === 'test' ? process.env.TEST_DOJO_CONNECTION : process.env.MAIN_DOJO_CONNECTION) || '');
        const readerKnex = TestUtilsWalletStorage_1._tu.createMySQLFromConnection(connection);
        reader = new StorageMySQLDojoReader_1.StorageMySQLDojoReader({
            ...index_all_1.StorageKnex.defaultOptions(),
            chain,
            knex: readerKnex
        });
        const writerKnex = env.runMySQL
            ? TestUtilsWalletStorage_1._tu.createLocalMySQL('stagingdojotone')
            : TestUtilsWalletStorage_1._tu.createLocalSQLite(await TestUtilsWalletStorage_1._tu.newTmpFile('stagingdojotone', false, false, true));
        writer = new index_all_1.StorageKnex({
            ...index_all_1.StorageKnex.defaultOptions(),
            chain,
            knex: writerKnex
        });
        await writer.dropAllData();
        await writer.migrate('stagingdojotone', '1'.repeat(64));
    });
    afterAll(async () => {
        await reader.destroy();
        await writer.destroy();
    });
    test('0', async () => {
        const readerSettings = await reader.getSettings();
        const writerSettings = await writer.getSettings();
        const identityKey = process.env.MY_TEST_IDENTITY || '';
        const ss = await EntitySyncState.fromStorage(writer, identityKey, readerSettings);
        for (;;) {
            const args = ss.makeRequestSyncChunkArgs(identityKey, writerSettings.storageIdentityKey);
            const chunk = await reader.getSyncChunk(args);
            const r = await ss.processRequestSyncChunkResult(writer, args, chunk);
            //console.log(`${r.maxUpdated_at} inserted ${r.inserts} updated ${r.updates}`)
            if (r.done)
                break;
        }
    });
});
//# sourceMappingURL=StorageMySQLDojoReader.man.test.js.map