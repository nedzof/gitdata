import { TrxToken } from '../../../sdk/WalletStorage.interfaces';
import { EntityBase, EntityStorage, SyncMap } from './EntityBase';
import { TableUser } from '../tables/TableUser';
export declare class EntityUser extends EntityBase<TableUser> {
    constructor(api?: TableUser);
    updateApi(): void;
    get userId(): number;
    set userId(v: number);
    get created_at(): Date;
    set created_at(v: Date);
    get updated_at(): Date;
    set updated_at(v: Date);
    get identityKey(): string;
    set identityKey(v: string);
    get activeStorage(): string;
    set activeStorage(v: string);
    get id(): number;
    set id(v: number);
    get entityName(): string;
    get entityTable(): string;
    equals(ei: TableUser, syncMap?: SyncMap | undefined): boolean;
    static mergeFind(storage: EntityStorage, userId: number, ei: TableUser, trx?: TrxToken): Promise<{
        found: boolean;
        eo: EntityUser;
        eiId: number;
    }>;
    mergeNew(storage: EntityStorage, userId: number, syncMap: SyncMap, trx?: TrxToken): Promise<void>;
    mergeExisting(storage: EntityStorage, since: Date | undefined, ei: TableUser, syncMap?: SyncMap, trx?: TrxToken): Promise<boolean>;
}
//# sourceMappingURL=EntityUser.d.ts.map