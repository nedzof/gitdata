import { Storage } from '../Storage.js';
import { Knex } from 'knex';
import type { Output } from '../../Output.js';
export declare class KnexStorage implements Storage {
    knex: Knex;
    constructor(knex: Knex);
    findOutput(txid: string, outputIndex: number, topic?: string, spent?: boolean, includeBEEF?: boolean): Promise<Output | null>;
    findOutputsForTransaction(txid: string, includeBEEF?: boolean): Promise<Output[]>;
    findUTXOsForTopic(topic: string, since?: number, limit?: number, includeBEEF?: boolean): Promise<Output[]>;
    deleteOutput(txid: string, outputIndex: number, _: string): Promise<void>;
    insertOutput(output: Output): Promise<void>;
    markUTXOAsSpent(txid: string, outputIndex: number, topic?: string): Promise<void>;
    updateConsumedBy(txid: string, outputIndex: number, topic: string, consumedBy: Array<{
        txid: string;
        outputIndex: number;
    }>): Promise<void>;
    updateTransactionBEEF(txid: string, beef: number[]): Promise<void>;
    updateOutputBlockHeight(txid: string, outputIndex: number, topic: string, blockHeight: number): Promise<void>;
    insertAppliedTransaction(tx: {
        txid: string;
        topic: string;
    }): Promise<void>;
    doesAppliedTransactionExist(tx: {
        txid: string;
        topic: string;
    }): Promise<boolean>;
    updateLastInteraction(host: string, topic: string, since: number): Promise<void>;
    getLastInteraction(host: string, topic: string): Promise<number>;
}
//# sourceMappingURL=KnexStorage.d.ts.map