openapi: 3.0.3
info:
  title: Genius System Overlay API (MVP)
  version: "1.0.0"
  description: >
    SPV-first, vendor-neutral overlay API for verifiable data lineage, payments, and receipt-gated access on Bitcoin SV.
    Core endpoints: submit, bundle, resolve, ready, price, pay, data, producers, advisories, health, metrics.
servers:
  - url: https://overlay.example.com
paths:
  /submit:
    post:
      summary: Submit a raw transaction containing DLM1/TRN1/OTR1 (OP_RETURN) and optional off-chain manifest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rawTx]
              properties:
                rawTx:
                  type: string
                  description: Raw transaction hex containing at least one OP_RETURN with DLM1/TRN1/OTR1
                manifest:
                  $ref: '#/components/schemas/DLM1Manifest'
      responses:
        '200':
          description: Accepted and indexed
          content:
            application/json:
              schema:
                type: object
                properties:
                  admitted:
                    type: array
                    items:
                      type: object
                      properties:
                        txo:
                          type: string
                          description: txid:vout of the OP_RETURN output
                        type:
                          type: string
                          enum: [DLM1, TRN1, OTR1]
                        versionId:
                          type: string
                          description: Usually the manifestHash for DLM1
        '400':
          description: Invalid transaction/CBOR/manifest
  /bundle:
    get:
      summary: Get a lineage bundle with SPV proofs
      parameters:
        - name: versionId
          in: query
          required: true
          schema: { type: string, pattern: '^[0-9a-fA-F]{64}$' }
        - name: depth
          in: query
          required: false
          schema: { type: integer, minimum: 0, default: 10 }
      responses:
        '200':
          description: Lineage bundle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineageBundle'
        '400':
          description: Depth too large or invalid versionId
        '404':
          description: Unknown versionId
  /resolve:
    get:
      summary: Resolve versions/parents with pagination
      parameters:
        - name: versionId
          in: query
          schema: { type: string, pattern: '^[0-9a-fA-F]{64}$' }
        - name: datasetId
          in: query
          schema: { type: string }
        - name: cursor
          in: query
          schema: { type: string }
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
      responses:
        '200':
          description: Version listing / parents
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasetId: { type: string }
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        versionId: { type: string }
                        manifestHash: { type: string }
                        txo: { type: string }
                        parents:
                          type: array
                          items: { type: string }
                        createdAt: { type: string }
                  paging:
                    type: object
                    properties:
                      nextCursor: { type: string, nullable: true }
        '400':
          description: Invalid query
  /ready:
    post:
      summary: Policy-based gate (minConfs, classification, advisories, attributes)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [versionId]
              properties:
                versionId:
                  type: string
                  pattern: '^[0-9a-fA-F]{64}$'
                policy:
                  type: object
                  properties:
                    minConfs: { type: integer, minimum: 0, default: 1 }
                    classificationAllowList:
                      type: array
                      items: { type: string }
                    allowRecalled: { type: boolean, default: false }
                    requiredEndorsementRoles:
                      type: array
                      items: { type: string }
                receiptId:
                  type: string
      responses:
        '200':
          description: Ready verdict
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready: { type: boolean }
                  reasons:
                    type: array
                    items: { type: string }
                  confsUsed: { type: integer }
                  bestHeight: { type: integer }
                  bundle:
                    $ref: '#/components/schemas/LineageBundle'
        '400':
          description: Invalid request
  /price:
    get:
      summary: Get a price quote for a resource (per-producer rules)
      parameters:
        - name: resource
          in: query
          required: true
          schema: { type: string, description: 'manifest: or dataset:' }
        - name: class
          in: query
          schema: { type: string, default: 'standard' }
      responses:
        '200':
          description: Price quote
          content:
            application/json:
              schema:
                type: object
                properties:
                  resource: { type: string }
                  producerId: { type: string }
                  unit: { type: string, enum: ['sat/byte','sat/call'] }
                  price: { type: number }
                  requiredAttrs:
                    type: array
                    items: { type: string }
                  class: { type: string }
                  expiresAt: { type: string, format: date-time }
        '404':
          description: No producer or no active price rule
  /pay:
    post:
      summary: Pay and receive a signed receipt (overlay-signed) and revenue event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [resource, quantity]
              properties:
                resource: { type: string }
                quantity: { type: integer, minimum: 1 }
                attrs:
                  type: object
                  additionalProperties: true
                payer:
                  type: string
      responses:
        '200':
          description: Receipt issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
        '400':
          description: Invalid payment request
  /v1/data:
    get:
      summary: Stream data by contentHash (requires valid receipt)
      parameters:
        - name: contentHash
          in: query
          required: true
          schema: { type: string, pattern: '^[0-9a-fA-F]{64}$' }
        - name: receiptId
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Data stream
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '402':
          description: Payment required, expired or insufficient bandwidth
        '403':
          description: Invalid or missing receipt
  /producers/register:
    post:
      summary: Register a producer profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identityKey, payoutTarget]
              properties:
                identityKey: { type: string, description: 'Compressed pubkey (hex)' }
                payoutTarget: { type: string }
                displayName: { type: string }
                contact: { type: string }
                attrs:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: ['ok'] }
                  producerId: { type: string }
        '400':
          description: Invalid registration
  /producers/price:
    post:
      summary: Upsert a per-producer price rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [producerId, pattern, unit, basePrice]
              properties:
                producerId: { type: string }
                pattern: { type: string }
                unit: { type: string, enum: ['sat/byte','sat/call'] }
                basePrice: { type: number }
                tiers:
                  type: object
                  additionalProperties: { type: number }
                requiredAttrs:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Price rule upserted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: ['ok'] }
        '400':
          description: Invalid rule
  /producers/revenue:
    get:
      summary: Revenue summary and events for a producer
      parameters:
        - name: producerId
          in: query
          required: true
          schema: { type: string }
        - name: period
          in: query
          schema: { type: string, default: '30d' }
        - name: limit
          in: query
          schema: { type: integer, default: 50, minimum: 1, maximum: 200 }
        - name: offset
          in: query
          schema: { type: integer, default: 0, minimum: 0 }
      responses:
        '200':
          description: Revenue data
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
                    additionalProperties: true
                  period:
                    type: object
                    properties:
                      days: { type: integer }
                      since: { type: integer }
                      now: { type: integer }
                  totals:
                    type: object
                    properties:
                      grossSat: { type: integer }
                      quantity: { type: integer }
                  events:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '400':
          description: Invalid query
  /producers/dashboard:
    get:
      summary: Producer profile, pricebook, last30d totals
      parameters:
        - name: producerId
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Dashboard JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile:
                    type: object
                    additionalProperties: true
                  pricebook:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
                  revenue30d:
                    type: object
                    properties:
                      grossSat: { type: integer }
                      events: { type: integer }
        '400':
          description: Invalid producerId
  /advisories:
    post:
      summary: Issue an advisory/recall for a version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advisory'
      responses:
        '200':
          description: Advisory accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: ['ok'] }
        '400':
          description: Invalid advisory
    get:
      summary: List advisories for a versionId
      parameters:
        - name: versionId
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Advisories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advisory'
        '400':
          description: Invalid versionId
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
  /metrics:
    get:
      summary: Metrics for monitoring
      responses:
        '200':
          description: Metrics JSON
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
components:
  schemas:
    DLM1Manifest:
      $ref: './schemas/dlm1-manifest.schema.json'
    LineageBundle:
      $ref: './schemas/lineage-bundle.schema.json'
    Advisory:
      $ref: './schemas/advisory.schema.json'
    Receipt:
      $ref: './schemas/receipt.schema.json'
