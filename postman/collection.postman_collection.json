{
  "info": {
    "name": "Gitdata Overlay — E2E",
    "_postman_id": "cfe2f7aa-1111-4d00-aaaa-000000000001",
    "description": "E2E collection: submit → bundle → ready → price → pay → data",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8788" },
    { "key": "datasetId", "value": "demo-dataset" },
    { "key": "versionId", "value": "" },
    { "key": "contentHash", "value": "" },
    { "key": "receiptId", "value": "" },
    { "key": "priceSats", "value": "5000" }
  ],
  "item": [
    {
      "name": "Submit (Builder) — /submit/dlm1",
      "request": {
        "method": "POST",
        "header": [{ "key": "content-type", "value": "application/json" }],
        "url": "{{baseUrl}}/submit/dlm1",
        "body": {
          "mode": "raw",
          "raw": "{\n  \"manifest\": {{manifest}}\n}"
        },
        "description": "Validate manifest and return OP_RETURN scriptHex"
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Build a sample manifest inline if not provided via env",
              "const manifest = pm.environment.get('manifest') || JSON.stringify({",
              "  type: 'datasetVersionManifest',",
              "  datasetId: pm.environment.get('datasetId') || '{{datasetId}}',",
              "  description: 'Postman demo dataset',",
              "  content: { contentHash: '{{contentHash}}' },",
              "  provenance: { createdAt: new Date().toISOString() },",
              "  policy: { license: 'cc-by-4.0', classification: 'public' }",
              "});",
              "pm.variables.set('manifest', manifest);",
              "pm.request.body.raw = JSON.stringify({ manifest: JSON.parse(manifest) });"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200', () => pm.response.code === 200);",
              "const js = pm.response.json();",
              "pm.expect(js.versionId).to.match(/^[0-9a-fA-F]{64}$/);",
              "pm.environment.set('versionId', js.versionId);",
              "pm.test('has scriptHex', () => (js.opReturnScriptHex || (js.outputs && js.outputs[0].scriptHex)));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Submit (Receiver) — /submit",
      "request": {
        "method": "POST",
        "header": [{ "key": "content-type", "value": "application/json" }],
        "url": "{{baseUrl}}/submit",
        "body": {
          "mode": "raw",
          "raw": "{ \"rawTx\": \"00\", \"manifest\": {{manifest}} }"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200', () => pm.response.code === 200);",
              "const js = pm.response.json();",
              "pm.expect(js.versionId).to.eql(pm.environment.get('versionId'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Bundle — /bundle",
      "request": {
        "method": "GET",
        "url": "{{baseUrl}}/bundle?versionId={{versionId}}"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200 or 409', () => [200,409].includes(pm.response.code));",
              "if (pm.response.code === 200) {",
              "  const js = pm.response.json();",
              "  pm.test('has proofs', () => Array.isArray(js.proofs));",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Ready — /ready",
      "request": {
        "method": "GET",
        "url": "{{baseUrl}}/ready?versionId={{versionId}}"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200', () => pm.response.code === 200);",
              "const js = pm.response.json();",
              "pm.test('has ready field', () => js.hasOwnProperty('ready'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Price (GET) — /price",
      "request": {
        "method": "GET",
        "url": "{{baseUrl}}/price?versionId={{versionId}}"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200 or 404', () => [200,404].includes(pm.response.code));",
              "if (pm.response.code === 200) {",
              "  const js = pm.response.json();",
              "  pm.environment.set('contentHash', js.contentHash || pm.environment.get('contentHash'));",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Price (POST) — /price",
      "request": {
        "method": "POST",
        "header": [{ "key": "content-type", "value": "application/json" }],
        "url": "{{baseUrl}}/price",
        "body": {
          "mode": "raw",
          "raw": "{ \"versionId\": \"{{versionId}}\", \"satoshis\": {{priceSats}} }"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": { "exec": ["pm.test('status 200', () => pm.response.code === 200);"], "type": "text/javascript" }
        }
      ]
    },
    {
      "name": "Pay — /pay",
      "request": {
        "method": "POST",
        "header": [{ "key": "content-type", "value": "application/json" }],
        "url": "{{baseUrl}}/pay",
        "body": { "mode": "raw", "raw": "{ \"versionId\": \"{{versionId}}\", \"quantity\": 1 }" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('status 200 or 404', () => [200,404].includes(pm.response.code));",
              "if (pm.response.code === 200) {",
              "  const js = pm.response.json();",
              "  pm.environment.set('receiptId', js.receiptId);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Data — /v1/data",
      "request": {
        "method": "GET",
        "url": "{{baseUrl}}/v1/data?contentHash={{contentHash}}&receiptId={{receiptId}}"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200/403/409 acceptable in dev', () => [200,403,409,404].includes(pm.response.code));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}