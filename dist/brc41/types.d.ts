/**
 * BRC-41 PacketPay HTTP Payment Mechanism Types
 *
 * This module defines all types and interfaces for BRC-41 compliance
 * based on the PacketPay specification for HTTP micropayments.
 */
/**
 * BRC-41 PacketPay headers as defined in the specification
 */
export interface BRC41Headers {
    'x-bsv-payment-satoshis-required'?: string;
    'x-bsv-payment'?: string;
    'x-bsv-payment-satoshis-paid'?: string;
}
/**
 * BRC-29 Simple Payment Protocol message format
 */
export interface BRC29Payment {
    protocol: string;
    senderIdentityKey: string;
    derivationPrefix: string;
    transactions: BRC29Transaction[];
}
/**
 * BRC-29 Transaction envelope with outputs extension
 */
export interface BRC29Transaction {
    txid: string;
    rawTx: string;
    mapiResponses?: any[];
    proof?: {
        merkleRoot: string;
        blockHeight: number;
        merkleProof: string[];
    };
    outputs: Record<number, BRC29Output>;
}
/**
 * BRC-29 Output information
 */
export interface BRC29Output {
    suffix: string;
    satoshis?: number;
    script?: string;
}
/**
 * Payment request generated by API provider
 */
export interface BRC41PaymentRequest {
    satoshisRequired: number;
    service: string;
    description: string;
    expires: number;
    recipientPublicKey: string;
    derivationPrefix?: string;
    paymentId: string;
}
/**
 * Payment verification result
 */
export interface BRC41PaymentVerification {
    valid: boolean;
    satoshisPaid: number;
    paymentId: string;
    transactionId: string;
    senderIdentityKey: string;
    verified: boolean;
    reason?: string;
}
/**
 * Usage metrics for pricing calculation
 */
export interface UsageMetrics {
    complexity: number;
    dataSize: number;
    computeTime: number;
    cacheable: boolean;
    priority: 'low' | 'normal' | 'high';
}
/**
 * Pricing configuration for services
 */
export interface ServicePricing {
    baseFee: number;
    perByteRate: number;
    complexityMultiplier: number;
    priorityMultipliers: {
        low: number;
        normal: number;
        high: number;
    };
    discounts: {
        bulk: number;
        subscriber: number;
        highTrust: number;
    };
}
/**
 * Payment tracking record
 */
export interface PaymentRecord {
    paymentId: string;
    service: string;
    senderIdentityKey: string;
    satoshisRequired: number;
    satoshisPaid: number;
    transactionId: string;
    createdAt: Date;
    paidAt?: Date;
    verifiedAt?: Date;
    status: PaymentStatus;
    metadata: Record<string, any>;
}
/**
 * Payment status enumeration
 */
export type PaymentStatus = 'pending' | 'received' | 'verified' | 'expired' | 'invalid' | 'refunded';
/**
 * Payment analytics data
 */
export interface PaymentAnalytics {
    totalPayments: number;
    totalSatoshis: number;
    averagePayment: number;
    paymentsByService: Record<string, number>;
    revenueByService: Record<string, number>;
    paymentsByHour: Array<{
        hour: string;
        count: number;
        revenue: number;
    }>;
    topPayers: Array<{
        identityKey: string;
        count: number;
        total: number;
    }>;
}
/**
 * BRC-41 PacketPay service interface
 */
export interface BRC41PaymentService {
    createPaymentRequest(params: {
        service: string;
        satoshis: number;
        description: string;
        identityKey?: string;
        metadata?: Record<string, any>;
    }): Promise<BRC41PaymentRequest>;
    processPayment(payment: BRC29Payment, paymentId: string): Promise<BRC41PaymentVerification>;
    verifyPayment(paymentId: string, transactionId: string): Promise<BRC41PaymentVerification>;
    calculateFee(service: string, usage: UsageMetrics, identityLevel?: string): number;
    getPaymentRecord(paymentId: string): Promise<PaymentRecord | null>;
    getPaymentAnalytics(timeRange?: {
        start: Date;
        end: Date;
    }): Promise<PaymentAnalytics>;
    updateServicePricing(service: string, pricing: ServicePricing): Promise<void>;
    getServicePricing(service: string): Promise<ServicePricing | null>;
}
export declare const BRC41_VERSION = "1.0";
export declare const BRC29_PROTOCOL_ID = "3241645161d8";
export declare const PAYMENT_EXPIRY_MS = 300000;
export declare const MIN_PAYMENT_SATOSHIS = 1;
export declare const MAX_PAYMENT_SATOSHIS = 100000000;
/**
 * Default service pricing configuration
 */
export declare const DEFAULT_SERVICE_PRICING: ServicePricing;
/**
 * Service identifiers for different API endpoints
 */
export declare const SERVICE_TYPES: {
    readonly BRC24_LOOKUP: "brc24-lookup";
    readonly BRC24_QUERY: "brc24-query";
    readonly BRC26_STORE: "brc26-store";
    readonly BRC26_RETRIEVE: "brc26-retrieve";
    readonly DATA_SEARCH: "data-search";
    readonly ANALYTICS: "analytics";
};
export type ServiceType = (typeof SERVICE_TYPES)[keyof typeof SERVICE_TYPES];
export declare class BRC41Error extends Error {
    code: string;
    statusCode: number;
    constructor(message: string, code: string, statusCode?: number);
}
export declare class BRC41PaymentRequiredError extends BRC41Error {
    paymentRequest: BRC41PaymentRequest;
    constructor(paymentRequest: BRC41PaymentRequest);
}
export declare class BRC41PaymentInvalidError extends BRC41Error {
    reason: string;
    constructor(message: string, reason: string);
}
export declare class BRC41PaymentExpiredError extends BRC41Error {
    paymentId: string;
    constructor(paymentId: string);
}
export declare class BRC41ServicePricingError extends BRC41Error {
    service: string;
    constructor(message: string, service: string);
}
