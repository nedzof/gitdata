/**
 * BRC-41 PacketPay HTTP Payment Mechanism Types
 *
 * This module defines all types and interfaces for BRC-41 compliance
 * based on the PacketPay specification for HTTP micropayments.
 */

// ==================== BRC-41 Core Types ====================

/**
 * BRC-41 PacketPay headers as defined in the specification
 */
export interface BRC41Headers {
  'x-bsv-payment-satoshis-required'?: string; // Number of satoshis required (sent by provider in 402)
  'x-bsv-payment'?: string; // JSON stringified BRC-29 payment (sent by consumer)
  'x-bsv-payment-satoshis-paid'?: string; // Number of satoshis paid (sent by provider in response)
}

/**
 * BRC-29 Simple Payment Protocol message format
 */
export interface BRC29Payment {
  protocol: string; // "3241645161d8" - BRC-29 protocol identifier
  senderIdentityKey: string; // 33-byte compressed public key (hex)
  derivationPrefix: string; // Payment-specific prefix
  transactions: BRC29Transaction[]; // Array of transaction envelopes
}

/**
 * BRC-29 Transaction envelope with outputs extension
 */
export interface BRC29Transaction {
  txid: string; // Transaction ID
  rawTx: string; // Raw transaction hex
  mapiResponses?: any[]; // mAPI responses for SPV
  proof?: {
    merkleRoot: string;
    blockHeight: number;
    merkleProof: string[];
  };
  outputs: Record<number, BRC29Output>; // Output index -> output info
}

/**
 * BRC-29 Output information
 */
export interface BRC29Output {
  suffix: string; // Derivation suffix for this UTXO
  satoshis?: number; // Value in satoshis
  script?: string; // Locking script
}

/**
 * Payment request generated by API provider
 */
export interface BRC41PaymentRequest {
  satoshisRequired: number; // Amount required in satoshis
  service: string; // Service identifier
  description: string; // Human readable description
  expires: number; // Expiration timestamp
  recipientPublicKey: string; // Provider's public key for payment
  derivationPrefix?: string; // Optional pre-generated prefix
  paymentId: string; // Unique payment request ID
}

/**
 * Payment verification result
 */
export interface BRC41PaymentVerification {
  valid: boolean; // Whether payment is valid
  satoshisPaid: number; // Amount actually paid
  paymentId: string; // Payment request ID
  transactionId: string; // Transaction ID of payment
  senderIdentityKey: string; // Sender's public key
  verified: boolean; // Whether SPV verification passed
  reason?: string; // Reason if invalid
}

/**
 * Usage metrics for pricing calculation
 */
export interface UsageMetrics {
  complexity: number; // Complexity multiplier (1.0 = base)
  dataSize: number; // Data size in bytes
  computeTime: number; // Expected compute time in ms
  cacheable: boolean; // Whether result can be cached
  priority: 'low' | 'normal' | 'high'; // Request priority
}

/**
 * Pricing configuration for services
 */
export interface ServicePricing {
  baseFee: number; // Base fee in satoshis
  perByteRate: number; // Additional rate per byte
  complexityMultiplier: number; // Multiplier for complex operations
  priorityMultipliers: {
    low: number;
    normal: number;
    high: number;
  };
  discounts: {
    bulk: number; // Discount for bulk operations
    subscriber: number; // Discount for subscribers
    highTrust: number; // Discount for high-trust users
  };
}

/**
 * Payment tracking record
 */
export interface PaymentRecord {
  paymentId: string; // Unique payment ID
  service: string; // Service that was paid for
  senderIdentityKey: string; // Sender's BRC-31 identity
  satoshisRequired: number; // Amount that was required
  satoshisPaid: number; // Amount actually paid
  transactionId: string; // BSV transaction ID
  createdAt: Date; // When payment request was created
  paidAt?: Date; // When payment was received
  verifiedAt?: Date; // When payment was verified
  status: PaymentStatus; // Current payment status
  metadata: Record<string, any>; // Additional payment metadata
}

/**
 * Payment status enumeration
 */
export type PaymentStatus =
  | 'pending' // Payment requested but not yet received
  | 'received' // Payment received but not yet verified
  | 'verified' // Payment verified and accepted
  | 'expired' // Payment request expired
  | 'invalid' // Payment was invalid
  | 'refunded'; // Payment was refunded

/**
 * Payment analytics data
 */
export interface PaymentAnalytics {
  totalPayments: number; // Total number of payments
  totalSatoshis: number; // Total satoshis collected
  averagePayment: number; // Average payment amount
  paymentsByService: Record<string, number>; // Payments per service
  revenueByService: Record<string, number>; // Revenue per service
  paymentsByHour: Array<{ hour: string; count: number; revenue: number }>; // Hourly breakdown
  topPayers: Array<{ identityKey: string; count: number; total: number }>; // Top paying users
}

// ==================== Service Interface ====================

/**
 * BRC-41 PacketPay service interface
 */
export interface BRC41PaymentService {
  // Payment request generation
  createPaymentRequest(params: {
    service: string;
    satoshis: number;
    description: string;
    identityKey?: string;
    metadata?: Record<string, any>;
  }): Promise<BRC41PaymentRequest>;

  // Payment processing
  processPayment(payment: BRC29Payment, paymentId: string): Promise<BRC41PaymentVerification>;

  // Payment verification
  verifyPayment(paymentId: string, transactionId: string): Promise<BRC41PaymentVerification>;

  // Pricing calculation
  calculateFee(service: string, usage: UsageMetrics, identityLevel?: string): number;

  // Analytics and tracking
  getPaymentRecord(paymentId: string): Promise<PaymentRecord | null>;
  getPaymentAnalytics(timeRange?: { start: Date; end: Date }): Promise<PaymentAnalytics>;

  // Service management
  updateServicePricing(service: string, pricing: ServicePricing): Promise<void>;
  getServicePricing(service: string): Promise<ServicePricing | null>;
}

// ==================== Constants ====================

export const BRC41_VERSION = '1.0';
export const BRC29_PROTOCOL_ID = '3241645161d8';
export const PAYMENT_EXPIRY_MS = 300000; // 5 minutes
export const MIN_PAYMENT_SATOSHIS = 1; // Minimum 1 satoshi payment
export const MAX_PAYMENT_SATOSHIS = 100000000; // Maximum 1 BSV payment

/**
 * Default service pricing configuration
 */
export const DEFAULT_SERVICE_PRICING: ServicePricing = {
  baseFee: 1000, // 1000 satoshis base
  perByteRate: 10, // 10 satoshis per byte
  complexityMultiplier: 1.0,
  priorityMultipliers: {
    low: 0.8,
    normal: 1.0,
    high: 1.5,
  },
  discounts: {
    bulk: 0.9, // 10% bulk discount
    subscriber: 0.8, // 20% subscriber discount
    highTrust: 0.85, // 15% high trust discount
  },
};

/**
 * Service identifiers for different API endpoints
 */
export const SERVICE_TYPES = {
  BRC24_LOOKUP: 'brc24-lookup',
  BRC24_QUERY: 'brc24-query',
  BRC26_STORE: 'brc26-store',
  BRC26_RETRIEVE: 'brc26-retrieve',
  DATA_SEARCH: 'data-search',
  ANALYTICS: 'analytics',
} as const;

export type ServiceType = (typeof SERVICE_TYPES)[keyof typeof SERVICE_TYPES];

// ==================== Error Types ====================

export class BRC41Error extends Error {
  constructor(
    message: string,
    public code: string,
    public statusCode: number = 402,
  ) {
    super(message);
    this.name = 'BRC41Error';
  }
}

export class BRC41PaymentRequiredError extends BRC41Error {
  constructor(public paymentRequest: BRC41PaymentRequest) {
    super('Payment required to access this resource', 'BRC41_PAYMENT_REQUIRED', 402);
  }
}

export class BRC41PaymentInvalidError extends BRC41Error {
  constructor(
    message: string,
    public reason: string,
  ) {
    super(message, 'BRC41_PAYMENT_INVALID', 402);
  }
}

export class BRC41PaymentExpiredError extends BRC41Error {
  constructor(public paymentId: string) {
    super('Payment request has expired', 'BRC41_PAYMENT_EXPIRED', 402);
  }
}

export class BRC41ServicePricingError extends BRC41Error {
  constructor(
    message: string,
    public service: string,
  ) {
    super(message, 'BRC41_SERVICE_PRICING_ERROR', 500);
  }
}
