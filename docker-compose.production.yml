version: '3.8'

services:
  # PostgreSQL Database with automatic initialization
  postgres:
    image: postgres:15-alpine
    container_name: gitdata-postgres
    environment:
      POSTGRES_DB: overlay
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./src/db/schema-d08-realtime-packets.sql:/docker-entrypoint-initdb.d/02-d08-schema.sql
      - ./src/db/schema-d22-overlay-storage.sql:/docker-entrypoint-initdb.d/03-storage-schema.sql
      - ./populate-sample-data.sql:/docker-entrypoint-initdb.d/99-sample-data.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d overlay"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gitdata-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gitdata-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - gitdata-network

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gitdata-app
    environment:
      NODE_ENV: production
      PORT: 8788

      # Database Configuration
      PG_HOST: postgres
      PG_PORT: 5432
      PG_DATABASE: overlay
      PG_USER: postgres
      PG_PASSWORD: password

      # Redis Configuration
      REDIS_URL: redis://redis:6379

      # Application Configuration
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173,http://localhost:8080,http://localhost:8788

      # Security
      USE_REDIS_BUNDLES: "true"
    ports:
      - "8788:8788"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8788/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - gitdata-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local

# Network for service communication
networks:
  gitdata-network:
    driver: bridge